# -*- coding: utf-8 -*-
"""22027052.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cjm3drxFvP4lOUtq3oqCyhf-_WrWV9iY
"""

import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd

# Read data from a CSV file
filename = '1970-2021_DISASTERS_emdat data.csv'
data = pd.read_csv(filename)
data.head()
data.describe()
data.info()

# Display unique categories for textual columns
textual_columns = data.select_dtypes(include=['object']).columns  # Select only object type columns

for column in textual_columns:
    unique_categories = data[column].value_counts()
    print(f"Column: {column}")
    print(f"Unique Categories:\n{unique_categories}")
    print("=" * 50)

# Remove rows with 'Extra-terrestrial' in 'Disaster Subgroup'
data = data[data['Disaster Subgroup'] != 'Extra-terrestrial']
disaster_subgroup_counts = data['Disaster Subgroup'].value_counts()

# Filter data for 'Flood' and 'Storm' disasters
filtered_data = data[data['Disaster Type'].isin(['Flood', 'Storm'])]

# Group data by Disaster Type and Year, then count occurrences each year
grouped_data = filtered_data.groupby(['Disaster Type', 'Year']).size().unstack(level=0)

# Filter data for a specific disaster type (e.g., 'Flood')
disaster = 'Flood'
filtered_data = data[data['Disaster Type'] == disaster]

# Count occurrences of the specified disaster per continent
total_per_continent = filtered_data.groupby('Continent').size().reset_index(name='total').sort_values(by='total', ascending=False)

# Filter data for continent Asia
asia_data = data[data['Continent'] == 'Asia']

# Group data by country and calculate the total deaths, total damages, and total affected
country_stats = asia_data.groupby('Country').agg({
    'Total Deaths': 'sum',
    'Total Damages (\'000 US$)': 'sum',
    'Total Affected': 'sum'
}).reset_index()

# Find the top 3 most affected countries for each parameter
top_affected_deaths = country_stats.nlargest(3, 'Total Deaths')
top_affected_damages = country_stats.nlargest(3, 'Total Damages (\'000 US$)')
top_affected_affected = country_stats.nlargest(3, 'Total Affected')

# Calculate percentages for each parameter
total_deaths_sum = top_affected_deaths['Total Deaths'].sum()
top_affected_deaths['Deaths Percentage'] = (top_affected_deaths['Total Deaths'] / total_deaths_sum) * 100

total_damages_sum = top_affected_damages['Total Damages (\'000 US$)'].sum()
top_affected_damages['Damages Percentage'] = (top_affected_damages['Total Damages (\'000 US$)'] / total_damages_sum) * 100

total_affected_sum = top_affected_affected['Total Affected'].sum()
top_affected_affected['Affected Percentage'] = (top_affected_affected['Total Affected'] / total_affected_sum) * 100




# Create subplots
fig, axs = plt.subplots(3, 2, figsize=(15, 20))

# Set the title for the entire figure
fig.suptitle('Natural Disaster Analysis\n',fontweight='bold', fontsize = 24, y = 0.94)

# Plot 1 - Distribution of Disasters by Disaster Subgroup (Pie Chart)
axs[0, 0].pie(disaster_subgroup_counts, labels=disaster_subgroup_counts.index, autopct='%1.1f%%')
axs[0, 0].set_title('Fig-a: Distribution of Disasters by Disaster Subgroup')

# Plot 2 - Count of Disasters by Disaster Type (Countplot)
sns.countplot(data=data, x='Disaster Type', ax=axs[0, 1])
axs[0, 1].set_title('Fig-b:Frequency of Disasters by Disaster Type')
axs[0, 1].set_xlabel('Disaster Type')
axs[0, 1].set_ylabel('Frequency')
axs[0, 1].tick_params(axis='x', rotation=45)

# Plot 3 - Total Count of Flood and Storm Disasters per Year (Line Plot)
for disaster_type in grouped_data.columns:
    axs[1, 0].plot(grouped_data.index, grouped_data[disaster_type], marker='o', label=disaster_type)
axs[1, 0].set_title('Fig-c: Trend Flood and Storm Disasters per Year')
axs[1, 0].set_xlabel('Year')
axs[1, 0].set_ylabel('Total Count')
axs[1, 0].legend()
axs[1, 0].grid(True)

# Plot 4 - Total Count of Flood Disasters per Continent Over Years (Line Plot)
axs[1, 1].set_title(f'Fig-d:Total Count of {disaster} Disasters per Continent Over Years')

for continent in total_per_continent['Continent']:
    continent_data = filtered_data[filtered_data['Continent'] == continent]
    continent_grouped = continent_data.groupby('Year').size().reset_index(name='total')
    axs[1, 1].plot(continent_grouped['Year'], continent_grouped['total'], marker='o', label=continent)

axs[1, 1].set_xlabel('Year')
axs[1, 1].set_ylabel('Total Count')
axs[1, 1].legend()
axs[1, 1].grid(True)


# Plot 5 - Top 3 Most Affected Countries in Asia (Horizontal Bar Plot)
combined_data = pd.concat([
    top_affected_deaths[['Country', 'Deaths Percentage']],
    top_affected_damages[['Country', 'Damages Percentage']],
    top_affected_affected[['Country', 'Affected Percentage']]
], ignore_index=True)

bar_width = 0.25
index = combined_data.index

axs[2, 0].barh(index, combined_data['Deaths Percentage'], height=bar_width, label='Deaths Percentage', color='skyblue')
axs[2, 0].barh(index + bar_width, combined_data['Damages Percentage'], height=bar_width, label='Damages Percentage', color='salmon')
axs[2, 0].barh(index + 2 * bar_width, combined_data['Affected Percentage'], height=bar_width, label='Affected Percentage', color='lightgreen')

axs[2, 0].set_xlabel('Percentage')
axs[2, 0].set_yticks(index + bar_width)
axs[2, 0].set_yticklabels(combined_data['Country'])
axs[2, 0].set_ylabel('Country')
axs[2, 0].set_title('Fig-e:Top 3 Most Affected Countries in Asia (Percentage of Total Deaths, Damages, Affected)')
axs[2, 0].legend()

# Remove the empty subplot (axs[2, 1])
fig.delaxes(axs[2, 1])



# Adding text at the end of the figure
fig.text(0.01, 0.01, '\n\nStudent Name: Kavibharathi\nStudent id: 22027052\nFig-a Hydrological Disasters account for 40% of the disasters happening world wide, followed by Meteorological Disasters. Floods are one of the most occuring disaster in Hydrological Disasters (Fig-b).\nFloods and Storms are major natural disasters witnessed over the years (Fig-c).\n(Fig-d) Asia and Africa get most affected by floods. China faces major damges. Most death rates caused by floods are observed for Bangladesh  (Fig e).'
, ha='left',va='bottom', fontsize=9, color='grey')

# Adjust the spacing between subplots and footer text
plt.subplots_adjust(bottom=0.2)
# Adjust layout
plt.tight_layout(pad=4.8)
plt.savefig("22027052.png", dpi=300)







import pandas as pd
import matplotlib.pyplot as plt

import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd

# Read data from a CSV file
filename = '1970-2021_DISASTERS.xlsx - emdat data.csv'
data = pd.read_csv(filename)
data.head()

# Create subplots
fig, axs = plt.subplots(3, 2, figsize=(15, 20))

# Set the title for the entire figure
fig.suptitle('Natural Disaster Analysis\n',fontweight='bold', fontsize = 24, y = 0.94)

# Plot 1 - Distribution of Disasters by Disaster Subgroup (Pie Chart)
axs[0, 0].pie(disaster_subgroup_counts, labels=disaster_subgroup_counts.index, autopct='%1.1f%%')
axs[0, 0].set_title('Fig-a: Distribution of Disasters by Disaster Subgroup')

# Plot 2 - Count of Disasters by Disaster Type (Countplot)
sns.countplot(data=data, x='Disaster Type', ax=axs[0, 1])
axs[0, 1].set_title('Fig-b:Frequency of Disasters by Disaster Type')
axs[0, 1].set_xlabel('Disaster Type')
axs[0, 1].set_ylabel('Frequency')
axs[0, 1].tick_params(axis='x', rotation=45)

# Plot 3 - Total Count of Flood and Storm Disasters per Year (Line Plot)
for disaster_type in grouped_data.columns:
    axs[1, 0].plot(grouped_data.index, grouped_data[disaster_type], marker='o', label=disaster_type)
axs[1, 0].set_title('Fig-c: Trend Flood and Storm Disasters per Year')
axs[1, 0].set_xlabel('Year')
axs[1, 0].set_ylabel('Total Count')
axs[1, 0].legend()
axs[1, 0].grid(True)

# Plot 4 - Total Count of Flood Disasters per Continent Over Years (Line Plot)
axs[1, 1].set_title(f'Fig-d:Total Count of {disaster} Disasters per Continent Over Years')

for continent in total_per_continent['Continent']:
    continent_data = filtered_data[filtered_data['Continent'] == continent]
    continent_grouped = continent_data.groupby('Year').size().reset_index(name='total')
    axs[1, 1].plot(continent_grouped['Year'], continent_grouped['total'], marker='o', label=continent)

axs[1, 1].set_xlabel('Year')
axs[1, 1].set_ylabel('Total Count')
axs[1, 1].legend()
axs[1, 1].grid(True)


# Plot 5 - Top 3 Most Affected Countries in Asia (Horizontal Bar Plot)
combined_data = pd.concat([
    top_affected_deaths[['Country', 'Deaths Percentage']],
    top_affected_damages[['Country', 'Damages Percentage']],
    top_affected_affected[['Country', 'Affected Percentage']]
], ignore_index=True)

bar_width = 0.25
index = combined_data.index

axs[2, 0].barh(index, combined_data['Deaths Percentage'], height=bar_width, label='Deaths Percentage', color='skyblue')
axs[2, 0].barh(index + bar_width, combined_data['Damages Percentage'], height=bar_width, label='Damages Percentage', color='salmon')
axs[2, 0].barh(index + 2 * bar_width, combined_data['Affected Percentage'], height=bar_width, label='Affected Percentage', color='lightgreen')

axs[2, 0].set_xlabel('Percentage')
axs[2, 0].set_yticks(index + bar_width)
axs[2, 0].set_yticklabels(combined_data['Country'])
axs[2, 0].set_ylabel('Country')
axs[2, 0].set_title('Fig-e:Top 3 Most Affected Countries in Asia (Percentage of Total Deaths, Damages, Affected)')
axs[2, 0].legend()

# Remove the empty subplot (axs[2, 1])
fig.delaxes(axs[2, 1])



# Adding text at the end of the figure
fig.text(0.01, 0.01, '\n\nStudent Name: ********\nStudent id: ******\nFig-a Hydrological Disasters account for 40% of the disasters happening world wide, followed by Meteorological Disasters. Floods are one of the most occuring disaster in Hydrological Disasters (Fig-b).\nFloods and Storms are major natural disasters witnessed over the years (Fig-c).\n(Fig-d) Asia and Africa get most affected by floods. China faces major damges. Most death rates caused by floods are observed for Bangladesh  (Fig e).'
, ha='left',va='bottom', fontsize=9, color='grey')

# Adjust the spacing between subplots and footer text
plt.subplots_adjust(bottom=0.2)
# Adjust layout
plt.tight_layout(pad=4.8)
plt.savefig("22081557.png", dpi=300)



plt.show()